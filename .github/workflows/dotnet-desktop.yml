name: .NET Tests & Auto-commit

on:
  pull_request_target:          # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ä–∫–∞
    types: [opened, synchronize, reopened]
  push:
    branches-ignore: [main]     # –ø—Ä–∏ –ø—É—à–∞—Ö –≤ –≤–µ—Ç–∫–∏, –∫—Ä–æ–º–µ main
  workflow_dispatch:            # —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  issue_comment:                # –∑–∞–ø—É—Å–∫ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:

  check-target:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    steps:
      - name: üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ PR –≤ main
        shell: bash
        run: |
          BASE_REF="${{ github.event.pull_request.base.ref || github.event.pull_request.base?.ref }}"
          echo "Base branch: $BASE_REF"
          if [ "$BASE_REF" = "main" ]; then
            echo "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—É –≤ main –≤–µ—Ç–∫—É."
            exit 1
          else
            echo "‚úÖ PR –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ '$BASE_REF', –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã."
          fi

  tests:
    name: Run test
    runs-on: windows-latest
    needs: [check-target]
    if: |
      (github.event_name == 'pull_request_target' && needs.check-target.result == 'success') ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'issue_comment'
    strategy:
      matrix:
        configuration: [Debug]

    steps:
    - name: Checkout PR code safely
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore
      run: dotnet restore Lab2/Lab2.sln

    - name: Build
      run: dotnet build Lab2/Lab2.sln --configuration ${{ matrix.configuration }} --no-restore

    - name: Run tests (Purple‚ÜíBlue‚ÜíGreen‚ÜíWhite)
      id: cascade
      shell: pwsh
      run: |
        $colors = @('Purple', 'Blue', 'Green', 'White')
        foreach ($c in $colors) {
          Write-Host "üîé  –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ $c"
          dotnet test Lab2test/Lab2test.csproj `
            --filter "FullyQualifiedName~$c" `
            --configuration $Env:CFG `
            --no-build `
            --logger "trx;LogFileName=test-$c.trx"
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ  –ö–ª–∞—Å—Å $c –ø—Ä–æ—à—ë–ª. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å–∫–∞–¥."
            exit 0
          }
        }
        Write-Host "‚ùå  –ù–∏ –æ–¥–∏–Ω –∫–ª–∞—Å—Å –Ω–µ –ø—Ä–æ—à—ë–ª."
        exit 1
      env:
        CFG: ${{ matrix.configuration }}

    - name: Upload TRX
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trx-${{ matrix.configuration }}
        path: '**/test-results.trx'
